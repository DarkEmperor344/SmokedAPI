name: Build and Package
on:
  workflow_call:
    inputs:
      modules:
        description: 'Stringified JSON object listing modules to build'
        required: true
        type: string

      zip_command:
        description: 'A shell command for creating a release zip'
        required: true
        type: string

      config:
        description: 'A CMake build config'
        required: true
        type: string
        default: Release

jobs:
  build-project:
    name: Build ${{ matrix.module }} for ${{ matrix.arch }}-bit architecture
    runs-on: windows-2022
    strategy:
      matrix:
        module: ${{ fromJson(inputs.modules) }}
        arch: [ 32, 64 ]
        include:
          - arch: 32
            platform: Win32
            term: amd64_x86
          - arch: 64
            platform: x64
            term: amd64

    env:
      BUILD_DIR: ${{ github.workspace }}\build\${{ matrix.arch }}\${{ matrix.module }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('**/CMakeLists.txt') }}
          path: |
            ~/.nuget/packages
            ${{ env.BUILD_DIR }}/CMakeCache.txt
            
      - name: Create build directory
        shell: pwsh
        run: |
         New-Item -Path "${{ env.BUILD_DIR }}" -ItemType Directory -Force | Out-Null
        
      - name: Install and cache the latest CMake
        uses: lukka/get-cmake@latest

      - name: Setup Developer Command Prompt for Microsoft Visual C++.
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.term }}

      - name: Generate build files
        shell: cmd
        run: |
         cmake -G "Visual Studio 17 2022" ^
         -A "${{ matrix.platform }}" ^  # Use matrix variable instead of hardcoded x64
         -B "${{ env.BUILD_DIR }}" ^  # Use environment variable
         -DCMAKE_RUNTIME_OUTPUT_DIRECTORY="${{ env.BUILD_DIR }}/${{ inputs.config }}" ^  # Force output location
         -DCMAKE_POLICY_DEFAULT_CMP0048=NEW ^
         -DCMAKE_POLICY_VERSION_MINIMUM=3.5 ^
         -DMODULE=${{ matrix.module }}
         
      - name: Build project
        run: cmake --build "${{ env.BUILD_DIR }}" --config ${{ inputs.config }} --verbose

      - name: Verify DLLs exist
        shell: cmd
        run: |
          echo "Checking for DLLs in ${{ env.BUILD_DIR }}\${{ inputs.config }}"
          dir "${{ env.BUILD_DIR }}\${{ inputs.config }}"
          if not exist "${{ env.BUILD_DIR }}\${{ inputs.config }}\*.dll" (
            echo "ERROR: No DLLs found!"
            exit 1
          )
          
      - name: Print build outputs
        run: tree /f ${{ env.BUILD_DIR }}

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.module }}-${{ matrix.arch }}
          path: ${{ env.BUILD_DIR }}/${{ inputs.config }}/*.dll
          if-no-files-found: error
          
  package-project:
    name: Package the artifacts into a release zip
    if: always() && startsWith(github.ref, 'refs/tags/')  # Run even if builds fail
    runs-on: ubuntu-latest
    needs: build-project
    permissions:
      contents: write
    steps:
      - name: Setup version tag
        run: echo "VERSION_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Make release zip
        run: ${{ inputs.zip_command }}

      - name: Create a release draft
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.ZIP_NAME }}
